<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGlassPanelH</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objShootThrough</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( !global.camera3D )
{
    draw_sprite_ext(sprite_index,image_index,x,y+3,image_xscale,image_yscale,image_angle,c_black,0.5)
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    exit;
}

var z = 0;
var height = 24;

d3d_set_depth( -2 );
draw_sprite_ext(sprite_index,image_index,x,y+3,image_xscale,image_yscale,image_angle,c_black,0.5)
d3d_set_depth( z - height );
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);


var tex     = sprite_index;
var texid   = -1;
var u       = 1;
var v       = 1;
var col = c_white;
if (object_index == objWallBrickH || object_index == objWallBrickV) {
    col     = make_colour_rgb(127,0,20);
    tex     = sprWallTextureBrick
    height  = (64);
} else {
    col     = make_colour_rgb(192,192,192);
    tex     = sprWallTexture;
    height  = (64);
}


var x1      = x;
var y1      = y;
var z1      = (z-height);
var x2      = x;
var y2      = y;
var z2      = z;

texid = sprite_get_texture(tex,0);
v = height/sprite_get_height(tex);
draw_set_color(col);

if (sprite_width &gt; sprite_height) {
    // Horizontal Wall
    u = sprite_width /sprite_get_width(tex);
    x2 = (x+sprite_width);
    y1 = y;
    y2 = (y1);
    d3d_draw_wall(x2,y1,z1,x1,y2,z2,texid,u,v);
    
    y1 += sprite_height;
    y2 += sprite_height;    
    d3d_draw_wall(x1,y1,z1,x2,y2,z2,texid,u,v);

} else {
    // Vertical Wall
    u = sprite_height /sprite_get_width(tex);
    x1 = x;
    x2 = (x1);
    y2 = y+(sprite_height);
    d3d_draw_wall(x1,y1,z1,x2,y2,z2,texid,u,v);
    
    x1 += sprite_width;
    x2 += sprite_width;    
    d3d_draw_wall(x1,y2,z1,x2,y1,z2,texid,u,v);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
