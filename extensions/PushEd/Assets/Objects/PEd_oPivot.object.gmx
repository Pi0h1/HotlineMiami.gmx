<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @objectDescription
/**
 * The pivot.
 */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
x = 0; /*&lt; Pivot's position on the x axis. */
y = 0; /*&lt; Pivot's position on the y axis. */
z = 0; /*&lt; Pivot's position on the z axis. */
depth = -999999999;

////////////////////////////////////////////////////////////////////////////////
//
// Create model
//
modPart[2] = 0;

// Move
modPart[0] = d3d_model_create();
d3d_model_primitive_begin(modPart[0], pr_linelist);
d3d_model_vertex(modPart[0], 0, 0, 0.25);
d3d_model_vertex(modPart[0], 0, 0, 2);
d3d_model_primitive_end(modPart[0]);
d3d_model_cone(modPart[0],-0.25, -0.25, 2, 0.25, 0.25, 2.5, 1, 1, 1, 8);

// Rotate
modPart[1] = d3d_model_create();
d3d_model_primitive_begin(modPart[1], pr_linelist);
d3d_model_vertex(modPart[1], 0, 0, 0.25);
d3d_model_vertex(modPart[1], 0, 0, 2);
d3d_model_primitive_end(modPart[1]);
d3d_model_ellipsoid(modPart[1],-0.25, -0.25, 2, 0.25, 0.25, 2.5, 1, 1, 8);

// Scale
modPart[2] = d3d_model_create();
d3d_model_primitive_begin(modPart[2], pr_linelist);
d3d_model_vertex(modPart[2], 0, 0, 0.25);
d3d_model_vertex(modPart[2], 0, 0, 2);
d3d_model_primitive_end(modPart[2]);
d3d_model_block(modPart[2],-0.25, -0.25, 2, 0.25, 0.25, 2.5, 1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy model
d3d_model_destroy(modPart[0]);
d3d_model_destroy(modPart[1]);
d3d_model_destroy(modPart[2]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw pivot
d3d_set_lighting(false);
d3d_set_hidden(false);

var _tool = PEd_oEditor.editTool;
var _room = PEd_getCurrentRoom();

if (PEd_oEditor.editNow &gt;= PEdTools.Move
    &amp;&amp; PEd_oEditor.editNow != PEdTools.Rotate
    &amp;&amp; PEd_roomGetGrid(_room)
    &amp;&amp; !keyboard_check(vk_alt)
    &amp;&amp; _tool == PEdTools.Move)
{
    d3d_transform_set_identity();
    d3d_transform_add_translation(x, y, z);
    d3d_primitive_begin(pr_linelist);

    draw_set_colour(PEd_oEditor.editAxis);
    
    for (var i = -3; i &lt; 4; i++)
    {
        if (PEd_oEditor.editAxis != PEdAxes.Z)
        {
            d3d_vertex(PEd_roomGetSnapH(_room)*i, -PEd_roomGetSnapV(_room)*4, 0);
            d3d_vertex(PEd_roomGetSnapH(_room)*i, PEd_roomGetSnapV(_room)*4, 0);
            
            d3d_vertex(-PEd_roomGetSnapH(_room)*4, PEd_roomGetSnapV(_room)*i, 0);
            d3d_vertex(PEd_roomGetSnapH(_room)*4, PEd_roomGetSnapV(_room)*i, 0);
        }
        else if (global.pedUsing3D
            &amp;&amp; PEd_roomGetSnapD(_room) != 0)
        {
            d3d_vertex(PEd_roomGetSnapD(_room)*i, 0, -PEd_roomGetSnapD(_room)*4);
            d3d_vertex(PEd_roomGetSnapD(_room)*i, 0, PEd_roomGetSnapD(_room)*4);
            
            d3d_vertex(-PEd_roomGetSnapD(_room)*4, 0, PEd_roomGetSnapD(_room)*i);
            d3d_vertex(PEd_roomGetSnapD(_room)*4, 0, PEd_roomGetSnapD(_room)*i);
        }
    }
  
    d3d_primitive_end();
    d3d_transform_set_identity();
}

var _selectedObj = PEd_getSelectedObject();

////////////////////////////////////////////////////////////////////////////////
//
// 3D pivot
//
if (global.pedUsing3D)
{
    var _scale = point_distance_3d(x, y, z, PEd_oEditor.x, PEd_oEditor.y, PEd_oEditor.z)/20;
    
    draw_set_colour(PEdAxes.All);
    d3d_transform_set_identity();
    d3d_transform_add_scaling(_scale, _scale, _scale);
    d3d_transform_add_translation(x, y, z);
    d3d_draw_ellipsoid(-0.25, -0.25, -0.25, 0.25, 0.25, 0.25, -1, 1, 1, 8);
    d3d_transform_set_identity();
    
    // X
    d3d_transform_set_identity();
    if (_selectedObj &gt; 0
        &amp;&amp; _tool == PEdTools.Scale)
    {
        d3d_transform_add_rotation_y(-90);
        d3d_transform_add_scaling(_scale, _scale ,_scale);
        d3d_transform_add_translation(0, 0, 0);
        d3d_transform_add_rotation_y(PEd_instanceGetRotY(_selectedObj));
        d3d_transform_add_rotation_x(PEd_instanceGetRotX(_selectedObj));
        d3d_transform_add_rotation_z(PEd_instanceGetRotZ(_selectedObj));
        d3d_transform_add_translation(x, y, z);
    }
    else
    {
        d3d_transform_add_rotation_y(-90);
        d3d_transform_add_scaling(_scale, _scale ,_scale);
        d3d_transform_add_translation(x, y, z);
    }
    draw_set_colour(PEdAxes.X);
    d3d_model_draw(modPart[_tool], 0, 0, 0, -1);
    d3d_transform_set_identity();
    
    // Y
    d3d_transform_set_identity();
    if (_selectedObj &gt; 0
        &amp;&amp; _tool == PEdTools.Scale)
    {
        d3d_transform_add_rotation_x(90);
        d3d_transform_add_scaling(_scale, _scale ,_scale);
        d3d_transform_add_translation(0, 0, 0);
        d3d_transform_add_rotation_y(PEd_instanceGetRotY(_selectedObj));
        d3d_transform_add_rotation_x(PEd_instanceGetRotX(_selectedObj));
        d3d_transform_add_rotation_z(PEd_instanceGetRotZ(_selectedObj));
        d3d_transform_add_translation(x, y, z);
    }
    else
    {
        d3d_transform_add_rotation_x(90);
        d3d_transform_add_scaling(_scale, _scale ,_scale);
        d3d_transform_add_translation(x, y, z);
    }
    draw_set_colour(PEdAxes.Y);
    d3d_model_draw(modPart[_tool], 0, 0, 0, -1);
    d3d_transform_set_identity();
    
    // Z
    d3d_transform_set_identity();
    if (_selectedObj &gt; 0
        &amp;&amp; _tool == PEdTools.Scale)
    {
        d3d_transform_add_scaling(_scale, _scale ,_scale);
        d3d_transform_add_translation(0, 0, 0);
        d3d_transform_add_rotation_y(PEd_instanceGetRotY(_selectedObj));
        d3d_transform_add_rotation_x(PEd_instanceGetRotX(_selectedObj));
        d3d_transform_add_rotation_z(PEd_instanceGetRotZ(_selectedObj));
        d3d_transform_add_translation(x, y, z);
    }
    else
    {
        d3d_transform_add_scaling(_scale, _scale ,_scale);
        d3d_transform_add_translation(x, y, z);
    }
    draw_set_colour(PEdAxes.Z);
    d3d_model_draw(modPart[_tool], 0, 0, 0, -1);
    d3d_transform_set_identity();
}
else
{
    ////////////////////////////////////////////////////////////////////////////
    //
    // 2D pivot
    //
    var _scale = 32 * PEd_oEditor.viewZoom;

    draw_set_colour(PEdAxes.All);
    d3d_transform_set_identity();
    d3d_transform_add_scaling(_scale, _scale, _scale);
    d3d_transform_add_translation(x, y, z);
    d3d_draw_ellipsoid(-0.25, -0.25, -0.25, 0.25, 0.25, 0.25, -1, 1, 1, 8);
    d3d_transform_set_identity();
    
    if (_tool != PEdTools.Rotate)
    {
        // X
        d3d_transform_set_identity();
        if (_selectedObj &gt; 0
            &amp;&amp; _tool == PEdTools.Scale
            &amp;&amp; PEd_oEditor.editMode != PEdEditModes.Tile)
        {
            d3d_transform_add_rotation_y(-90);
            d3d_transform_add_scaling(_scale, _scale ,_scale);
            d3d_transform_add_translation(0, 0, 0);
            d3d_transform_add_rotation_z(PEd_instanceGetRotZ(_selectedObj));
            d3d_transform_add_translation(x, y, z);
        }
        else
        {
            d3d_transform_add_rotation_y(-90);
            d3d_transform_add_scaling(_scale, _scale ,_scale);
            d3d_transform_add_translation(x, y, z);
        }
        draw_set_colour(PEdAxes.X);
        d3d_model_draw(modPart[_tool], 0, 0, 0, -1);
        d3d_transform_set_identity();
        
        // Y
        d3d_transform_set_identity();
        if (_selectedObj &gt; 0
            &amp;&amp; _tool == PEdTools.Scale
            &amp;&amp; PEd_oEditor.editMode != PEdEditModes.Tile)
        {
            d3d_transform_add_rotation_x(90);
            d3d_transform_add_scaling(_scale, _scale ,_scale);
            d3d_transform_add_translation(0, 0, 0);
            d3d_transform_add_rotation_z(PEd_instanceGetRotZ(_selectedObj));
            d3d_transform_add_translation(x, y, z);
        }
        else
        {
            d3d_transform_add_rotation_x(90);
            d3d_transform_add_scaling(_scale, _scale ,_scale);
            d3d_transform_add_translation(x, y, z);
        }
        draw_set_colour(PEdAxes.Y);
        d3d_model_draw(modPart[_tool], 0, 0, 0, -1);
        d3d_transform_set_identity();
    }
}

draw_set_colour(c_white);
d3d_set_hidden(true);
d3d_set_lighting(global.pedLighting);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
