<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2147483647</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @objectDescription
/**
 * This is the main object. Handles all scene rendering and editing.
 */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
PEd_xmlInit();
PEd_meshInit();

pedFileSave        = "";
global.pedLighting = false;             /*&lt; If you have enabled lighting, set this to true. */
global.pedUsing3D  = false;             /*&lt; Determines whether you are in 3D or 2D mode. */
modeSwitch         = false;             /*&lt; Force switch between 3D/2D mode. */
pedRoomCurrent     = 0;                 /*&lt; The index of the room that we are currently editing. */
pedRoomList        = ds_list_create();  /*&lt; List of all rooms. Currentl only one room is supported! */

texture_set_repeat(true);
texture_set_interpolation(true);

////////////////////////////////////////////////////////////////////////////////
// Camera
viewLastX     = 0;
viewLastY     = 0;
viewZoom      = 1;
view_xview[0] = 0;
view_yview[0] = 0;
x             = -16;    /*&lt; Camera's position on the x axis. */
y             = 4;      /*&lt; Camera's position on the y axis. */
z             = 4;      /*&lt; Camera's position on the z axis. */
direction     = 0;      /*&lt; Camera's direction. */
camSpeed      = 1;      /*&lt; Camera's movement speed. */
camFOV        = 60;     /*&lt; Camera's field of view. */
camPitch      = 0;      /*&lt; Camera's angle on the y axis. */
camClipNear   = 1;      /*&lt; Distance to the near clipping plane. */
camClipFar    = 65536;  /*&lt; Distance to the far clipping plane. */

matWorld      = noone;
matView       = noone;
matProjection = noone;

// Mouse
mouseLastX = mouse_x;   /*&lt; The last x position of the mouse cursor. */
mouseLastY = mouse_y;   /*&lt; The last y position of the mouse cursor. */
mouseSens  = 0.5;       /*&lt; Mouse sensitivity. */

////////////////////////////////////////////////////////////////////////////////
// GUI
gui = PEd_guiInit();

windowWidth  = window_get_width();
windowHeight = window_get_height();
windowMouseX = window_mouse_get_x();
windowMouseY = window_mouse_get_y();

viewportX      = 0;
viewportY      = 0;
viewportWidth  = 1;
viewportHeight = 1;

// Tools
toolsTileEditorShow = true;

// Content browser
contentBrowserShowObjects     = true;
contentBrowserShowBackgrounds = true;
contentBrowserIndexObject     = -1;     /*&lt; Selected item in the object list. */
contentBrowserIndexBackground = -1;     /*&lt; Selected item in the background list. */
contentBrowserFilter          = "";

// Scene Outline
sceneOutlineFilter = "";

// Details
detailsViewShow           = true;
detailsRoomShow           = true;
detailsPhysicsShow        = true; 
detailsRoomBackgroundShow = true; 
detailsEditView           = 0;
detailsEditBackground     = 0;

// Game view
application_surface_enable(true);
application_surface_draw_enable(false);

mouseInViewport = false;
surInstSelect   = noone;
debugShow       = false;

////////////////////////////////////////////////////////////////////////////////
// Create GUI layout
guiMenuBar = PEd_guiCreateMenuBar();
PEd_guiMenuBarAddItem(guiMenuBar, PEd_guiCreateMenuBarItem("File", PEd_guiMenuFile));
PEd_guiMenuBarAddItem(guiMenuBar, PEd_guiCreateMenuBarItem("Edit", PEd_guiMenuObjectEdit));
PEd_guiMenuBarAddItem(guiMenuBar, PEd_guiCreateMenuBarItem("Play", PEd_guiMenuPlay));
PEd_guiMenuBarAddItem(guiMenuBar, PEd_guiCreateMenuBarItem("Help", PEd_guiMenuHelp));
PEd_guiAddItem(guiRoot, guiMenuBar);

var _statusBarHeight = guiLineHeight + 8;
guiStatusBar = PEd_guiCreateContainer(0, window_get_height() - _statusBarHeight, window_get_width(), _statusBarHeight);
guiStatusBar[? "content"] = PEd_guiContentStatusBar;
PEd_guiAddItem(guiRoot, guiStatusBar);

guiToolbar = PEd_guiCreateContainer(0, guiLineHeight, window_get_width(), 44);
PEd_guiCanvasSetBackground(guiToolbar, PEdColour.WindowBorder);
guiToolbar[? "content"] = PEd_guiContentToolbar;
PEd_guiAddItem(guiToolbar, PEd_guiCreateToolbarButton("New", PEd_guiSprIcons, 0, "New room", PEd_actCreateEmptyRoom));
PEd_guiAddItem(guiToolbar, PEd_guiCreateToolbarButton("Open", PEd_guiSprIcons, 1, "Open room", PEd_actOpenRoom));
PEd_guiAddItem(guiToolbar, PEd_guiCreateToolbarButton("Save", PEd_guiSprIcons, 2, "Save room", PEd_actSaveRoom));
PEd_guiAddItem(guiToolbar, PEd_guiCreateToolbarButton("Import", PEd_guiSprIcons, 3, "Import room", PEd_actImportRoom));
PEd_guiAddItem(guiToolbar, PEd_guiCreateToolbarButton("Export", PEd_guiSprIcons, 4, "Export room", PEd_actExportRoom));
guiButtonMode2D = PEd_guiCreateToolbarButton("2D", PEd_guiSprIcons, 5, "Switch to 2D mode", PEd_actSwitchTo2D);
PEd_guiAddItem(guiToolbar, guiButtonMode2D);
guiButtonMode3D = PEd_guiCreateToolbarButton("3D", PEd_guiSprIcons, 6, "Switch to 3D mode", PEd_actSwitchTo3D);
PEd_guiAddItem(guiToolbar, guiButtonMode3D);
guiButtonModeObject = PEd_guiCreateToolbarButton("Object", PEd_guiSprIcons, 7, "Object edit mode", PEd_actSwitchToObjectMode);
PEd_guiAddItem(guiToolbar, guiButtonModeObject);
guiButtonModeTile = PEd_guiCreateToolbarButton("Tile", PEd_guiSprIcons, 8, "Tile edit mode", PEd_actSwitchToTileMode);
PEd_guiAddItem(guiToolbar, guiButtonModeTile);
guiButtonToolMove = PEd_guiCreateToolbarButton("Move", PEd_guiSprIcons, 9, "Select and move objects", PEd_actMoveTool)
PEd_guiAddItem(guiToolbar, guiButtonToolMove);
guiButtonToolRotate = PEd_guiCreateToolbarButton("Rotate", PEd_guiSprIcons, 10, "Select and rotate objects", PEd_actRotateTool);
PEd_guiAddItem(guiToolbar, guiButtonToolRotate);
guiButtonToolScale = PEd_guiCreateToolbarButton("Scale", PEd_guiSprIcons, 11, "Select and scale objects", PEd_actScaleTool);
PEd_guiAddItem(guiToolbar, guiButtonToolScale);
guiSwitchFloor = PEd_guiCreateToolbarButton("Floor", PEd_guiSprIcons, 12, "Switch floor drawing", PEd_actSwitchFloor);
PEd_guiAddItem(guiToolbar, guiSwitchFloor);
guiSwitchGrid = PEd_guiCreateToolbarButton("Grid", PEd_guiSprIcons, 13, "Turn on/off snapping to grid", PEd_actSwitchGrid);
PEd_guiAddItem(guiToolbar, guiSwitchGrid);
PEd_guiAddItem(guiToolbar, PEd_guiCreateToolbarButton("Play", PEd_guiSprIcons, 14, "Play", PEd_actPlayRoom));
PEd_guiAddItem(guiToolbar, PEd_guiCreateToolbarButton("Info", PEd_guiSprIcons, 15, "Show info", PEd_actShowInfo));
PEd_guiAddItem(gui, guiToolbar);

var _dockY = PEd_guiShapeGetY(guiToolbar) + PEd_guiShapeGetHeight(guiToolbar) + 4;
guiDock = PEd_guiCreateDock(0, _dockY, window_get_width(), window_get_height() - _dockY - PEd_guiShapeGetHeight(guiStatusBar));
guiDock[? "splitSize"] = 0.2;
PEd_guiAddItem(gui, guiDock);

var _left = PEd_guiCreateDock();
_left[? "splitType"] = PEdGUISplit.Vertical;

guiTools = PEd_guiCreatePanel("Tools");
PEd_guiPanelSetContent(guiTools, PEd_guiContentTools);
PEd_guiAddItem(_left, guiTools);

guiContentBrowser = PEd_guiCreatePanel("Content Browser");
PEd_guiPanelSetTitleBar(guiContentBrowser, PEd_guiContentTitleBarContentBrowser);
PEd_guiPanelSetContent(guiContentBrowser, PEd_guiContentContentBrowser);
PEd_guiAddItem(_left, guiContentBrowser);
PEd_guiAddItem(guiDock, _left);

var _right = PEd_guiCreateDock();
_right[? "splitSize"] = 0.7;
guiViewport = PEd_guiCreateViewport();
PEd_guiAddItem(_right, guiViewport);

var __right = PEd_guiCreateDock();
PEd_guiShapeSetDepth(__right, 0);
__right[? "splitType"] = PEdGUISplit.Vertical;
__right[? "splitSize"] = 0.3;

guiSceneOutline = PEd_guiCreatePanel("Scene Outline");
PEd_guiPanelSetTitleBar(guiSceneOutline, PEd_guiContentTitleBarSceneOutline);
PEd_guiPanelSetContent(guiSceneOutline, PEd_guiContentSceneOutline);
PEd_guiAddItem(__right, guiSceneOutline);

guiDetails = PEd_guiCreatePanel("Details");
PEd_guiPanelSetContent(guiDetails, PEd_guiContentDetails);
PEd_guiAddItem(__right, guiDetails);
PEd_guiAddItem(_right, __right);
PEd_guiAddItem(guiDock, _right);

guiColourPickerTileEditor = noone;
guiColourPickerObject = noone;
guiColourPickerRoom = noone;
guiWindowInfo = noone;

////////////////////////////////////////////////////////////////////////////////
// Keyboard shortcuts
ksNewRoom = PEd_guiCreateKeyboardShortcut(PEd_actCreateEmptyRoom);
PEd_guiKeyboardShorcutAddKey(ksNewRoom, vk_control);
PEd_guiKeyboardShorcutAddKey(ksNewRoom, ord("N"));
PEd_guiAddKeyboardShortcut(gui, ksNewRoom);

ksOpenRoom = PEd_guiCreateKeyboardShortcut(PEd_actOpenRoom);
PEd_guiKeyboardShorcutAddKey(ksOpenRoom, vk_control);
PEd_guiKeyboardShorcutAddKey(ksOpenRoom, ord("O"));
PEd_guiAddKeyboardShortcut(gui, ksOpenRoom);

ksImportRoom = PEd_guiCreateKeyboardShortcut(PEd_actImportRoom);
PEd_guiKeyboardShorcutAddKey(ksImportRoom, vk_control);
PEd_guiKeyboardShorcutAddKey(ksImportRoom, ord("I"));
PEd_guiAddKeyboardShortcut(gui, ksImportRoom);

ksSaveRoom = PEd_guiCreateKeyboardShortcut(PEd_actSaveRoom);
PEd_guiKeyboardShorcutAddKey(ksSaveRoom, vk_control);
PEd_guiKeyboardShorcutAddKey(ksSaveRoom, ord("S"));
PEd_guiAddKeyboardShortcut(gui, ksSaveRoom);

ksSaveRoomAs = PEd_guiCreateKeyboardShortcut(PEd_actSaveRoomAs);
PEd_guiKeyboardShorcutAddKey(ksSaveRoomAs, vk_control);
PEd_guiKeyboardShorcutAddKey(ksSaveRoomAs, vk_shift);
PEd_guiKeyboardShorcutAddKey(ksSaveRoomAs, ord("S"));
PEd_guiAddKeyboardShortcut(gui, ksSaveRoomAs);

ksExportRoom = PEd_guiCreateKeyboardShortcut(PEd_actExportRoom);
PEd_guiKeyboardShorcutAddKey(ksExportRoom, vk_control);
PEd_guiKeyboardShorcutAddKey(ksExportRoom, ord("E"));
PEd_guiAddKeyboardShortcut(gui, ksExportRoom);

ksSwitchFloor = PEd_guiCreateKeyboardShortcut(PEd_actSwitchFloor);
PEd_guiKeyboardShorcutAddKey(ksSwitchFloor, vk_control);
PEd_guiKeyboardShorcutAddKey(ksSwitchFloor, ord("F"));
PEd_guiAddKeyboardShortcut(gui, ksSwitchFloor);

ksSwitchGrid = PEd_guiCreateKeyboardShortcut(PEd_actSwitchGrid);
PEd_guiKeyboardShorcutAddKey(ksSwitchGrid, vk_control);
PEd_guiKeyboardShorcutAddKey(ksSwitchGrid, ord("G"));
PEd_guiAddKeyboardShortcut(gui, ksSwitchGrid);

ksCopyObjects = PEd_guiCreateKeyboardShortcut(PEd_actCopySelectedObjects);
PEd_guiKeyboardShorcutAddKey(ksCopyObjects, vk_control);
PEd_guiKeyboardShorcutAddKey(ksCopyObjects, ord("C"));
PEd_guiAddKeyboardShortcut(gui, ksCopyObjects);

ksDestroyObjects = PEd_guiCreateKeyboardShortcut(PEd_actDestroySelectedObjects);
PEd_guiKeyboardShorcutAddKey(ksDestroyObjects, vk_delete);
PEd_guiAddKeyboardShortcut(gui, ksDestroyObjects);

ksClearSelection = PEd_guiCreateKeyboardShortcut(PEd_actClearSelection);
PEd_guiKeyboardShorcutAddKey(ksClearSelection, vk_control);
PEd_guiKeyboardShorcutAddKey(ksClearSelection, ord("A"));
PEd_guiAddKeyboardShortcut(gui, ksClearSelection);

ksCloseWindow = PEd_guiCreateKeyboardShortcut(PEd_actCloseWindow);
PEd_guiKeyboardShorcutAddKey(ksCloseWindow, vk_control);
PEd_guiKeyboardShorcutAddKey(ksCloseWindow, ord("W"));
PEd_guiAddKeyboardShortcut(gui, ksCloseWindow);

ksSwitchTool = PEd_guiCreateKeyboardShortcut(PEd_actSwitchTool);
PEd_guiKeyboardShorcutAddKey(ksSwitchTool, vk_tab);
PEd_guiAddKeyboardShortcut(gui, ksSwitchTool);

ksSwitchDebug = PEd_guiCreateKeyboardShortcut(PEd_actSwitchDebug);
PEd_guiKeyboardShorcutAddKey(ksSwitchDebug, vk_f1);
PEd_guiAddKeyboardShortcut(gui, ksSwitchDebug);

ksSwitchMode = PEd_guiCreateKeyboardShortcut(PEd_switchMode);
PEd_guiKeyboardShorcutAddKey(ksSwitchMode, vk_f2);
PEd_guiAddKeyboardShortcut(gui, ksSwitchMode);

ksSwitchEditMode = PEd_guiCreateKeyboardShortcut(PEd_actSwitchEditMode);
PEd_guiKeyboardShorcutAddKey(ksSwitchEditMode, vk_f3);
PEd_guiAddKeyboardShortcut(gui, ksSwitchEditMode);

ksPlayRoom = PEd_guiCreateKeyboardShortcut(PEd_actPlayRoom);
PEd_guiKeyboardShorcutAddKey(ksPlayRoom, vk_f10);
PEd_guiAddKeyboardShortcut(gui, ksPlayRoom);

ksMovePivotHere = PEd_guiCreateKeyboardShortcut(PEd_actMovePivotHere);
PEd_guiKeyboardShorcutAddKey(ksMovePivotHere, vk_alt);
PEd_guiKeyboardShorcutAddKey(ksMovePivotHere, mb_right);
PEd_guiAddKeyboardShortcut(guiViewport, ksMovePivotHere);

// Inputs
ksInputCut = PEd_guiCreateKeyboardShortcut(PEd_guiInputCut);
PEd_guiKeyboardShorcutAddKey(ksInputCut, vk_control);
PEd_guiKeyboardShorcutAddKey(ksInputCut, ord("W"));

ksInputCopy = PEd_guiCreateKeyboardShortcut(PEd_guiInputCopy);
PEd_guiKeyboardShorcutAddKey(ksInputCopy, vk_control);
PEd_guiKeyboardShorcutAddKey(ksInputCopy, ord("C"));

ksInputPaste = PEd_guiCreateKeyboardShortcut(PEd_guiInputPaste);
PEd_guiKeyboardShorcutAddKey(ksInputPaste, vk_control);
PEd_guiKeyboardShorcutAddKey(ksInputPaste, ord("V"));

ksInputDelete = PEd_guiCreateKeyboardShortcut(PEd_guiInputDelete);
PEd_guiKeyboardShorcutAddKey(ksInputDelete, vk_control);
PEd_guiKeyboardShorcutAddKey(ksInputDelete, ord("D"));

ksInputSelectAll = PEd_guiCreateKeyboardShortcut(PEd_guiInputSelectAll);
PEd_guiKeyboardShorcutAddKey(ksInputSelectAll, vk_control);
PEd_guiKeyboardShorcutAddKey(ksInputSelectAll, ord("A"));

////////////////////////////////////////////////////////////////////////////////
// Editor
enum PEdEditModes
{
    Object,
    Tile,
};

enum PEdTools
{
    None = -1,
    Move,
    Rotate,
    Scale,
};

enum PEdAxes
{
    None = 0,
    X    = $0000FF,
    Y    = $00FF00,
    Z    = $FE0000,
    All  = $FEFEFE,
};

enum PEdDataTypes
{
    Bool,
    String,
    Real,
    Vector2,
    Vector3,
    Colour,
    Alpha,
    Background,
    Object,
};

editFloor        = true;                /*&lt; True if the floor (of room size) is visible. */
editTool         = PEdTools.Move;       /*&lt; Current edit tool. */
editAxis         = PEdAxes.None;        /*&lt; On which axis do we edit. */
editNow          = PEdTools.None;       /*&lt; Tool in action. */
mouseOff         = PEd_vec3(0, 0, 0);   /*&lt; Mouse offset from pivot. */
mouseLast        = PEd_vec3(0, 0, 0);   /*&lt; Last mouse position. */
pedDnDInstance   = noone;               /*&lt; The id of the curently DnD instance. */
editMode         = PEdEditModes.Object; /*&lt; Current edit mode. */
guiDnDBackground = -1;
guiDnDObject     = -1;
bkgShow          = -1;
colorShow        = -1;

// Create pivot
instance_create(0, 0, PEd_oPivot);

// Create default room
ds_list_add(pedRoomList, PEd_createRoom("room", 512, 512));

// Object lists
pedObjectList = ds_list_create();
var _index = 0;
do
{
    var _name = object_get_name(_index++);
    if (string_pos("PEd_", _name) != 1) // Do not add objects that start with "PEd_"
    {
        ds_list_add(pedObjectList, _name);
    }
}
until (object_get_name(_index) == "&lt;undefined&gt;");

selectedObjects     = ds_list_create();
selectedObjectsData = ds_list_create();
customData          = ds_list_create();

////////////////////////////////////////////////////////////////////////////////
// Tools
tileZoom             = 1; 
tileStepX            = 0;
tileStepY            = 0;
tileOffX             = 0;
tileOffY             = 0;
tileGridW            = 32;
tileGridH            = 32;
tilePartX            = 0;
tilePartY            = 0;
tilePartW            = tileGridW;
tilePartH            = tileGridH;
tileBground          = 0;
tileGridW            = 32;
tileGridH            = 32;
tileColour           = c_white;
tileAlpha            = 1;
tileScaleX           = 1;
tileScaleY           = 1;
tileDepth            = 1000000;
tileDeleteUnderlying = true;
tileLayerSelected    = 0;

// TODO: Find out if this is necessary.
tileLayers  = ds_list_create(); /*&lt; List of depths of all tiles. */
tileVisible = ds_list_create(); /*&lt; List of visibility for tile layers. */

ds_list_add(tileLayers, tileDepth); /*&lt; Default tile layer. */
ds_list_add(tileVisible, true);

var _tiles = tile_get_ids();
for (var i = 0; i &lt; array_length_1d(_tiles); i++)
{
    var _depth = tile_get_depth(_tiles[i]);
    if (ds_list_find_index(tileLayers, _depth) == -1)
    {
        ds_list_add(tileLayers, _depth);
        ds_list_add(tileVisible, true);
    }
}

////////////////////////////////////////////////////////////////////////////////
// After full inicialization start/end 3D mode
if (global.pedUsing3D)
    PEd_start3D();
else
    PEd_end3D();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load resources

// This is just for demo purposes. You can handle resource loading in any other
// instance and any other way you want to.

////////////////////////////////////////////////////////////////////////////////
// Textures
global.texDef = background_get_texture(PEd_bgrDef);

////////////////////////////////////////////////////////////////////////////////
// Models
global.modBlock = d3d_model_create();
d3d_model_block(global.modBlock, -1, -1, -1, 1, 1, 1, 1, 1);

global.modEllipsoid = d3d_model_create();
d3d_model_ellipsoid(global.modEllipsoid, -1, -1, -1, 1, 1, 1, 1, 1, 16);

global.modCone = d3d_model_create();
d3d_model_cone(global.modCone, -1, -1, -1, 1, 1, 1, 1, 1, 1, 16);

global.modCylinder = d3d_model_create();
d3d_model_cylinder(global.modCylinder, -1, -1, -1, 1, 1, 1, 1, 1, 1, 16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
application_surface_draw_enable(true);
PEd_guiCleanUp();
if (ds_exists(customData, ds_type_list))
{
    ds_list_destroy(customData);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit
if (show_question("Do you want to save the room before leaving?"))
{
    var _room = PEd_getCurrentRoom();

    if (pedFileSave == "")
    {
        pedFileSave = get_save_filename("PushEd File|*.ped", PEd_roomGetName(_room));
    }
    
    if (pedFileSave != "")
    {
        PEd_roomSaveToPEd(_room, pedFileSave);
    }
}
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open room
var f = get_open_filename("PushEd Files|*.ped", "");

if (f != "")
{
    PEd_actClearRoom();
    var _room = PEd_loadRoomFromPEd(f);
    if (_room != noone)
    {
        PEd_roomDestroy(PEd_getCurrentRoom());
        ds_list_delete(pedRoomList, pedRoomCurrent);
        ds_list_add(pedRoomList, _room);
        PEd_selectObject(PEd_roomGetId(_room), true);
        PEd_guiShowPopupMessage("Room loaded!");
    }
    else
    {
        PEd_guiShowPopupMessage("Load failed!");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear room
PEd_actClearRoom();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Import room
var f = get_open_filename("All Room Files|*.room.gmx;*.bbmap"
                          + "|GameMaker Room File|*.room.gmx"
                          + "|BlueBurn Map File|*.bbmap"
                          , "");

if (f != "")
{
    var _room = noone;
    
    if (string_pos(".bbmap", f) &gt; 0)
    {
        PEd_actClearRoom();
        _room = PEd_loadRoomFromBBMAPAuto(f);
    }
    else if (string_pos(".room.gmx", f) &gt; 0)
    {
        PEd_actClearRoom();
        _room = PEd_loadRoomFromGMX(f);
    }
    
    if (_room != noone)
    {
        PEd_roomDestroy(PEd_getCurrentRoom());
        ds_list_delete(pedRoomList, pedRoomCurrent);
        ds_list_add(pedRoomList, _room);
        PEd_guiShowPopupMessage("Room imported!");
        PEd_selectObject(PEd_roomGetId(_room), true);
    }
    else
    {
        PEd_guiShowPopupMessage("Import failed!");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Export room 
var _room = PEd_getCurrentRoom();
var f = get_save_filename("GMS Room File|*.room.gmx"
                          + "|BlueBurn Map File|*.bbmap",
                          PEd_roomGetName(_room));

if (f != "")
{
    var _saved = false;

    if (string_pos(".bbmap", f) &gt; 0)
    {
        _saved = PEd_roomSaveToBBMAP2(_room, f);
    }
    else if (string_pos(".room.gmx", f) &gt; 0)
    {
        _saved = PEd_roomSaveToGMX(_room, f);
    }

    if (_saved)
    {
        PEd_guiShowPopupMessage("Room exported!");
    }
    else
    {
        PEd_guiShowPopupMessage("Export failed!");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save room
var _room = PEd_getCurrentRoom();

if (pedFileSave == "")
{
    pedFileSave = get_save_filename("PushEd File|*.ped", PEd_roomGetName(_room));
}

if (pedFileSave != "")
{
    if (PEd_roomSaveToPEd(_room, pedFileSave))
    {
        PEd_guiShowPopupMessage("Room Saved!");
    }
    else
    {
        PEd_guiShowPopupMessage("Save failed!");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin step
windowWidth = window_get_width();
windowHeight = window_get_height();
windowMouseX = window_mouse_get_x();
windowMouseY = window_mouse_get_y();

// Optimization
// TODO: Write new optimization script

/*instance_deactivate_all(true);
instance_activate_object(PEd_oPivot);
if (editObj &gt; 0
    &amp;&amp; editMode == PEdEditModes.Object)
{
    instance_activate_object(editObj.object_index);
}

if (!global.pedUsing3D)
{ 
    var _offset = 32;
    instance_activate_region(view_xview[0] - _offset,
                             view_yview[0] - _offset,
                             viewportW * viewZoom + _offset * 2,
                             viewportW * viewZoom + _offset * 2,
                             true);
}
else
{
    var _dist = 1024;
    var _x = x + lengthdir_x(_dist, direction);
    var _y = y + lengthdir_y(_dist, direction);
    var _area = _dist * 2;
    instance_activate_region(_x - _area, _y - _area, _area * 2,_area * 2, true);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI
var _windowWidth = window_get_width();
var _windowHeight = window_get_height();
PEd_guiShapeSetWidth(guiMenuBar, _windowWidth);
PEd_guiShapeSetWidth(guiToolbar, _windowWidth);
PEd_guiShapeSetWidth(guiDock, _windowWidth);
var _statusBarHeight = PEd_guiShapeGetHeight(guiStatusBar);
PEd_guiShapeSetWidth(guiStatusBar, _windowWidth);
PEd_guiShapeSetY(guiStatusBar, _windowHeight - _statusBarHeight);
PEd_guiRequestRedraw(guiStatusBar);
PEd_guiShapeSetHeight(guiDock, _windowHeight - PEd_guiShapeGetY(guiDock) - _statusBarHeight - 4);

PEd_guiUpdate();

mouseInViewport = PEd_guiShapeIsHovered(guiViewport);

if (!PEd_guiShapeExists(guiWindowInfo))
{
    guiWindowInfo = noone;
}

////////////////////////////////////////////////////////////////////////////////
// Set colours from colour pickers
var _selectedObj = PEd_getSelectedObject();

// Room
if (!PEd_guiShapeExists(guiColourPickerRoom))
{
    guiColourPickerRoom = noone;
} else if (_selectedObj &gt;= 0
    &amp;&amp; PEd_guiShapeExists(guiColourPickerRoom))
{
    PEd_guiDestroyShape(guiColourPickerRoom);
    guiColourPickerRoom = noone;
}
if (PEd_guiShapeExists(guiColourPickerRoom))
{
    var _cpContainer = guiColourPickerRoom[? "container"];
    PEd_roomSetColour(PEd_getCurrentRoom(), _cpContainer[? "colour"]);
    PEd_guiRequestRedrawAll(guiRoot)
}

// Object
if (!PEd_guiShapeExists(guiColourPickerObject))
{
    guiColourPickerObject = noone;
}
else if (_selectedObj &lt;= 0
    &amp;&amp; PEd_guiShapeExists(guiColourPickerObject))
{
    PEd_guiDestroyShape(guiColourPickerObject);
    guiColourPickerObject = noone;
}
if (PEd_guiShapeExists(guiColourPickerObject))
{
    var _cpContainer = guiColourPickerObject[? "container"];
    var _colour = _cpContainer[? "colour"];
    var _alpha = _cpContainer[? "alpha"];
    if (editMode == PEdEditModes.Object)
    {
        PEd_instanceSetColour(_selectedObj, _colour);
        PEd_instanceSetAlpha(_selectedObj, _alpha);
        PEd_guiRequestRedrawAll(guiRoot)
    }
    else if (editMode == PEdEditModes.Tile)
    {
        PEd_tileSetBlend(_selectedObj, _colour);
        PEd_tileSetAlpha(_selectedObj, _alpha);
        PEd_guiRequestRedrawAll(guiRoot)
    }
}

// Tile editor
if (!PEd_guiShapeExists(guiColourPickerTileEditor))
{
    guiColourPickerTileEditor = noone;
}
if (PEd_guiShapeExists(guiColourPickerTileEditor))
{
    var _cpContainer = guiColourPickerTileEditor[? "container"];
    tileColour = _cpContainer[? "colour"];
    tileAlpha = _cpContainer[? "alpha"];
    PEd_guiRequestRedrawAll(guiRoot)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update
if (modeSwitch) 
{
    PEd_switchMode();
    modeSwitch = false;
}

PEd_cameraControl();
PEd_dragAndDrop();
PEd_instanceSelecting();
if (global.pedUsing3D)
{
    PEd_instanceEdit3D();
}
else
{
    PEd_tileEdit();
    PEd_instanceEdit2D();
}

guiButtonMode2D[? "highlight"] = !global.pedUsing3D;
guiButtonMode3D[? "highlight"] = global.pedUsing3D;
guiButtonModeObject[? "highlight"] = (editMode == PEdEditModes.Object);
guiButtonModeTile[? "highlight"] = (editMode == PEdEditModes.Tile);
guiButtonToolMove[? "highlight"] = (editTool == PEdTools.Move);
guiButtonToolRotate[? "highlight"] = (editTool == PEdTools.Rotate);
guiButtonToolScale[? "highlight"] = (editTool == PEdTools.Scale);
guiSwitchFloor[? "highlight"] = editFloor;
guiSwitchGrid[? "highlight"] = PEd_roomGetGrid(PEd_getCurrentRoom());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create context menu
if (mouseInViewport
    &amp;&amp; PEd_guiCanShowContextMenu())
{
    // TODO: Add keyboard shortcuts for mouse buttons
    var _contextMenu = PEd_guiCreateContextMenu();
    PEd_guiAddItem(_contextMenu,
        PEd_guiCreateContextMenuItem("Move pivot here", PEd_actMovePivotHere, ksMovePivotHere, "Move pivot at this position."));
    PEd_guiShowContextMenu(_contextMenu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save mouse press position
guiMousePressX = windowMouseX;
guiMousePressY = windowMouseY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Close context menu
if (guiContextMenu != noone
    &amp;&amp; !PEd_guiShapeIsHovered(guiContextMenu)
    &amp;&amp; !PEd_guiShapeDelegatesRecursive(guiContextMenu, guiShapeHovered))
{
    PEd_guiDestroyShape(guiContextMenu);
    guiContextMenu = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI
var _colour = draw_get_colour();
var _alpha = draw_get_alpha();
if (_colour != PEdColour.Text)
    draw_set_colour(PEdColour.Text);
if (_alpha != 1)
    draw_set_alpha(1);
texture_set_repeat(false);
texture_set_interpolation(false);
draw_set_colour_write_enable(true, true, true, false);

if (global.pedUsing3D)
    d3d_set_culling(false);

PEd_guiDraw();

if (global.pedUsing3D)
    d3d_set_culling(true);

draw_set_colour_write_enable(true, true, true, true);
texture_set_interpolation(true);
texture_set_repeat(true);
if (draw_get_alpha() != _alpha)
    draw_set_alpha(_alpha);
if (draw_get_colour() != _colour)
    draw_set_colour(_colour);

// This code has been at the end of the draw GUI event since ever
// and I don't remember why. Better just leave it here or something
// could break.
if (mouse_check_button_released(mb_left))
{
    if (guiDnDObject != -1)
    {
        guiDnDObject = -1;
    }
    
    if (pedDnDInstance != noone)
    {
        if (editMode == PEdEditModes.Object)
        {
            PEd_oPivot.x = pedDnDInstance.x;
            PEd_oPivot.y = pedDnDInstance.y;
            if (global.pedUsing3D)
            {
                PEd_oPivot.z = pedDnDInstance.z;
            }
            PEd_selectObject(pedDnDInstance, true);
            pedDnDInstance = noone;
        }
        PEd_guiRequestRedrawAll(guiRoot)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update room background settings
var _room = PEd_getCurrentRoom();
var _width = PEd_roomGetWidth(_room);
var _height = PEd_roomGetHeight(_room);

background_colour = PEd_roomGetColour(_room);
background_showcolour = PEd_roomGetShowColour(_room);

for (var i = 0; i &lt; 8; i++)
{
    var _background = PEd_roomGetBackground(_room, i);
    background_foreground[i] = PEd_backgroundIsForeground(_background);
    background_index[i] = PEd_backgroundGetImage(_background);
    background_visible[i] = PEd_backgroundGetVisible(_background);
    
    if (PEd_backgroundGetStretch(_background))
    {
        background_xscale[i] = _width / background_get_width(background_index[i]);
        background_yscale[i] = _height / background_get_height(background_index[i]);
        background_htiled[i] = false;
        background_vtiled[i] = false;
        background_x[i] = 0;
        background_y[i] = 0;
    }
    else
    {
        background_xscale[i] = 1;
        background_yscale[i] = 1;
        background_htiled[i] = PEd_backgroundGetTiledHor(_background);
        background_vtiled[i] = PEd_backgroundGetTiledVer(_background);
        background_x[i] = PEd_backgroundGetX(_background);
        background_y[i] = PEd_backgroundGetY(_background);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw instance highlight
var _size = ds_list_size(selectedObjects);
if (_size &gt; 0) 
{
    if (!surface_exists(surInstSelect)) 
    {
       surInstSelect = surface_create(viewportWidth, viewportHeight);
    }
    else if (surface_get_width(surInstSelect) != viewportWidth
        || surface_get_height(surInstSelect) != viewportHeight)
    {
        surface_resize(surInstSelect, viewportWidth, viewportHeight);
    }
    
    surface_set_target(surInstSelect);
    draw_clear_alpha(c_black, 0);
    
    // Projection
    PEd_cameraSetProjection();
    
    // Set shader
    shader_set(PEd_shInstHighlight);
    
    // Draw instances from multiple selection
    for (var i = 0; i &lt; _size; i++) 
    {
        if (editMode == PEdEditModes.Object) 
        {
            // Instance
            var _inst = selectedObjects[| i];
            if (_inst &gt; 0)
            {
                with (selectedObjects[| i]) 
                {
                    if ((sprite_index != -1
                        &amp;&amp; !global.pedUsing3D)
                        || object_is_ancestor(object_index, PEd_oObject2D)) 
                    {
                        draw_self();
                    }
                    event_perform(ev_draw, 0);
                }
            }
        }
        else if (editMode == PEdEditModes.Tile) 
        {
            // Tile
            var _tile = selectedObjects[| i];
            if (_tile &gt; 0)
            {
                draw_background_part_ext(tile_get_background(_tile),
                                         tile_get_left(_tile), 
                                         tile_get_top(_tile),
                                         tile_get_width(_tile), 
                                         tile_get_height(_tile),
                                         tile_get_x(_tile), 
                                         tile_get_y(_tile),
                                         tile_get_xscale(_tile), 
                                         tile_get_yscale(_tile),
                                         tile_get_blend(_tile), 
                                         tile_get_alpha(_tile));
            }
        }
    }
    
    surface_reset_target();
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
var _room = PEd_getCurrentRoom();

PEd_cameraSetProjection(true);

if (global.pedUsing3D)
{
    ////////////////////////////////////////////////////////////////////////////
    //
    // 3D
    //                  
    
    // 3D sound listening
    audio_listener_position(x, y, z);
    audio_listener_orientation(x + dcos(direction),
                               y - dsin(direction),
                               z + dtan(camPitch),
                               0, 0, 1);
    
    d3d_set_lighting(false);
    texture_set_interpolation(false);
    
    // Floor
    if (editFloor)
    {
        d3d_set_culling(false);
        d3d_draw_floor(0, 0, -0.01, PEd_roomGetWidth(_room), PEd_roomGetHeight(_room), -0.01, background_get_texture(PEd_bgrDef), PEd_roomGetWidth(_room) / 128, PEd_roomGetHeight(_room) / 128);
        d3d_set_culling(true);
    }
        
    // Origin
    // X
    d3d_primitive_begin(pr_linelist);
    d3d_vertex(0, 0, 0);
    d3d_vertex(512, 0, 0);
        
    // Y
    d3d_vertex(0, 0, 0);
    d3d_vertex(0, 512, 0);
        
    // Z
    d3d_vertex(0, 0, -512);
    d3d_vertex(0, 0, 512);
    d3d_primitive_end();
        
    d3d_set_lighting(global.pedLighting);
    texture_set_interpolation(true);
}
else
{
    ////////////////////////////////////////////////////////////////////////////
    //
    // 2D
    //
    
    // 3D sound listening
    audio_listener_position(view_xview[0] + viewportWidth * viewZoom * 0.5, viewportHeight * viewZoom * 0.5, 0);
    audio_listener_orientation(0, 0, 1000, 0, 1, 0);

    // Floor
    if (editFloor)
    {
        d3d_draw_floor(0, 0, 0, PEd_roomGetWidth(_room), PEd_roomGetHeight(_room), 0, background_get_texture(PEd_bgrDef), PEd_roomGetWidth(_room) / 128, PEd_roomGetHeight(_room) / 128);
    }
      
    // Origin
    // X
    d3d_primitive_begin(pr_linelist);
    d3d_vertex(-64, 0, 0);
    d3d_vertex(512, 0, 0);
        
    // Y
    d3d_vertex(0, -64, 0);
    d3d_vertex(0, 512, 0);
    d3d_primitive_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Close context menu
if (PEd_guiShapeExists(guiContextMenu))
{
    PEd_guiDestroyShape(guiContextMenu);
    guiContextMenu = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
