<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWaterPlacementMaskA</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables
infinity = 20000; // Comment out this line if in GMS2

// Create
image_speed = 0;

// fix seems
x -= 0.1;
y -= 0.1;
image_xscale += ( 0.2 / sprite_get_width( sprite_index ) );
image_yscale += ( 0.2 / sprite_get_height( sprite_index ) );

use_appsurf_copy = true;
global.water_appsurf = -1;
global.water_appsurf_redraw = true;
global.water_appsurf_lastdepth = -infinity;


surf = -1;
surf_width = 0;
surf_height = 0;


water_texture = bgWater;
water_blend = merge_colour(c_aqua,c_white,0.5); //$00AF7C;

u_fTime = shader_get_uniform( shdWater, "u_fTime" );
u_vWaterBlend = shader_get_uniform( shdWater, "u_vWaterBlend" );
u_pWaterTexture = shader_get_sampler_index( shdWater, "u_pWaterTexture" );
u_pDistortionMap = shader_get_sampler_index( shdWater, "u_pDistortionMap" );
u_pAppSurf = shader_get_sampler_index( shdWater, "u_pAppSurf" );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GameMaker Studio 2 Code
/*
texture_set_repeat = gpu_set_texrepeat;
texture_set_interpolation = gpu_set_texfilter;
texture_set_repeat_ext = gpu_set_texrepeat_ext;
texture_set_interpolation_ext = gpu_set_texfilter_ext;
/*
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean Up

if !( surf &lt; 0 )
{
surface_free( surf );
surf = -1;
}

if !( global.water_appsurf &lt; 0 )
{
surface_free( global.water_appsurf );
global.water_appsurf = -1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Override
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pre Draw
global.water_appsurf_redraw = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
//gpu_push_state();
//gpu_set_cullmode( cull_noculling );
aWaterColor[0] = color_get_red( water_blend ) / 255
aWaterColor[1] = color_get_green( water_blend ) / 255
aWaterColor[2] = color_get_blue( water_blend ) / 255
aWaterColor[3] = 1;
var pAppSurf;
if ( use_appsurf_copy )
{
if surface_exists( application_surface )
{
if !surface_exists( global.water_appsurf )
{
surface_depth_disable( true );
surf_width = surface_get_width( application_surface );
surf_height = surface_get_height( application_surface );
global.water_appsurf = surface_create( 1024, 1024 );
}
}

if ( global.water_appsurf_redraw ) || ( depth != global.water_appsurf_lastdepth )
{
global.water_appsurf_redraw = false;
global.water_appsurf_lastdepth = depth;
surface_set_target( global.water_appsurf );
draw_clear( c_black );
if ( true )
{
draw_primitive_begin_texture( pr_trianglestrip, surface_get_texture( application_surface ) );
draw_vertex_texture_color( 0, 0, 0, 0, c_white, 1 );
draw_vertex_texture_color( 1024, 0, 1, 0, c_white, 1 );
draw_vertex_texture_color( 0, 1024, 0, 1, c_white, 1 );
draw_vertex_texture_color( 1024, 1024, 1, 1, c_white, 1 );
draw_primitive_end();
}
surface_reset_target();
if ( false )
{
show_message( surface_save( global.water_appsurf, "D:\surf.png" ) );
game_end();
}
}
pAppSurf = surface_get_texture( global.water_appsurf );
}
else
{
pAppSurf = surface_get_texture( application_surface );
}
shader_set( shdWater );

texture_set_repeat( true );
texture_set_interpolation_ext( 0, true );
texture_set_interpolation_ext( u_pWaterTexture, false );
texture_set_interpolation_ext( u_pDistortionMap, false );
texture_set_interpolation_ext( u_pAppSurf, false );
texture_set_repeat_ext( u_pAppSurf, false );

shader_set_uniform_f( u_fTime, current_time / 1000 );
shader_set_uniform_f_array( u_vWaterBlend, aWaterColor );
texture_set_stage( u_pWaterTexture, sprite_get_texture( water_texture, 0 ) );
texture_set_stage( u_pDistortionMap, sprite_get_texture( bgWaterMap, 0 ) );
texture_set_stage( u_pAppSurf, pAppSurf );

event_user(0); // draw the water. override with user event 0 e.g draw with a prim model

texture_set_repeat( false );
texture_set_interpolation( false );

shader_reset();
//gpu_pop_state();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
