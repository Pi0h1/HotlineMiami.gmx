<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>resX=480
resY=270
shadowColor = c_black
shadowAlpha = 0.5

shadowQuality = 3

shadowSurface = surface_create((resX)*shadowQuality,(resY)*shadowQuality);
shadowOffset1=1
shadowOffset2=3
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit
if (global.devmode==false) exit
shadowOffset1+=1
shadowOffset2+=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit
if (global.devmode==false) exit
shadowOffset1-=1
shadowOffset2-=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objShadowManager</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!surface_exists(shadowSurface)){
shadowSurface = surface_create((resX)*shadowQuality,(resY)*shadowQuality);
}

var viewX = view_xview[0]
var viewY = view_yview[0]

surface_set_target(shadowSurface);
draw_clear_alpha(c_black,0);

d3d_set_fog(true,shadowColor,0,1);

with (objPCrawl) {
draw_sprite_ext (
    sprite_index,
    image_index,
    (x + other.shadowOffset1-viewX) * other.shadowQuality,
    (y + other.shadowOffset1-viewY) * other.shadowQuality,
    image_xscale * other.shadowQuality,image_yscale * other.shadowQuality,
    angle,
    c_black,
    image_alpha
)
}

with (objSolid) {

if object_index!=objRailV{
draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset2-viewX)*other.shadowQuality,(y+other.shadowOffset2-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,image_alpha)
}

}

with (objShootThrough) {
draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset2-viewX)*other.shadowQuality,(y+other.shadowOffset2-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,image_alpha)
}

with (objWindow) {
draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset2-viewX)*other.shadowQuality,(y+other.shadowOffset2-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,image_alpha)
}

with (objDoor) {
draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset2-viewX)*other.shadowQuality,(y+other.shadowOffset2-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,image_alpha)
}

with (objFurniture) {
if (objFurniture.visible=true){
draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,objFurniture.image_alpha)
}
}

with (objAboveFurniture) {
draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset2-viewX)*other.shadowQuality,(y+other.shadowOffset2-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,image_alpha)
}

with (objEnemyCrawl) {
draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,image_alpha)
}

with (objPlayerCar) {
draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,image_alpha)
}

with (objExecution) {
draw_sprite_ext(enemy,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,image_alpha)
draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,image_alpha)
}

with (objBoss){
if objBoss.hasLegs=true{
draw_sprite_ext(legsprite,legindex,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,angle,c_black,1)
}
draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,angle,c_black,1)
}

with (objEnemy){
if object_get_parent(objEnemyIdle){
    draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,direction,c_black,1)
} else {
if object_index=objEnemyMeleeStationary or object_index=objEnemyMelee{
if scrIsSearching(sprite_index) {} else {

    draw_sprite_ext(sprELegs,image_index*2,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,angle,c_black,1)
    }
    draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,angle,c_black,1)

}else{
    
    if object_index=objDogPatrol
    {
    draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,direction,c_black,1)
    }
    else
    {
    if object_index=objEnemyFat
        {
        draw_sprite_ext(sprEFatLegs,image_index*2,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,direction,c_black,1)
        draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,direction,c_black,1)
        }
        else
        {
            if scrIsSearching(sprite_index) {} else {
            draw_sprite_ext(sprELegs,image_index*2,(x+other.shadowOffset1-viewX)*other.shadowQuality,(y+other.shadowOffset1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,angle,c_black,1)
            }
            draw_sprite_ext(sprite_index,image_index,(x+other.shadowOffset1-viewX)*other.shadowQuality-shake+random(shake*0.5),(y+other.shadowOffset1-viewY)*other.shadowQuality-shake+random(shake*0.5),image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,angle,c_black,1)
        }
    }
    }
}
}

with (objPlayerJacket){
draw_sprite_ext(legsprite,legindex,(x-viewX+other.shadowOffset1)*other.shadowQuality,(y-viewY+other.shadowOffset1)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,legdir,c_black,1)
draw_sprite_ext(sprite_index,image_index,(x-viewX+other.shadowOffset1)*other.shadowQuality,(y-viewY+other.shadowOffset1)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality*left,dir,c_black,1)
draw_sprite_ext(pose_index,image_index,(x-viewX+other.shadowOffset1)*other.shadowQuality,(y-viewY+other.shadowOffset1)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality*left,dir,c_black,1)
}

with (objPlayerMouseHouse){
draw_sprite_ext(legsprite,legindex,(x-viewX+other.shadowOffset1)*other.shadowQuality,(y-viewY+other.shadowOffset1)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,legdir,c_black,1)
draw_sprite_ext(sprite_index,image_index,(x-viewX+other.shadowOffset1)*other.shadowQuality,(y-viewY+other.shadowOffset1)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality*left,dir,c_black,1)
draw_sprite_ext(pose_index,image_index,(x-viewX+other.shadowOffset1)*other.shadowQuality,(y-viewY+other.shadowOffset1)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality*left,dir,c_black,1)
}

d3d_set_fog(false,c_white,0,0);

surface_reset_target();

draw_set_alpha(shadowAlpha);
if surface_exists(shadowSurface){
//texture_set_interpolation(true)
    draw_surface_ext(shadowSurface, viewX, viewY, (1/shadowQuality),  (1/shadowQuality), 0, shadowColor, shadowAlpha);
//texture_set_interpolation(false)
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
