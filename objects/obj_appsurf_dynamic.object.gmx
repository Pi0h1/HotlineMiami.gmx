<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>override_application_surface = true;
backbuffer_color = c_black // (the "black bars" behind the game)

updates = 0

if (override_application_surface)
    application_surface_draw_enable(false)

window_width_last = 0
window_height_last = 0
window_aspect = 16 / 9

camera_width_last = 0
camera_height_last = 0
camera_aspect = 480 / 270

video_aspect = 480 / 270

video_w_edge = 1
video_h_edge = 1

globalvar video_width;
globalvar video_height;

video_width = 0
video_height = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(application_surface) {
    var xx = round((window_get_width() - video_width) / 2)
    var yy = round((window_get_height() - video_height) / 2)
    
    //draw_set_alpha_test(false)
    draw_enable_alphablend(false)
    draw_surface(application_surface, xx, yy)
    draw_enable_alphablend(true)
    //draw_set_alpha_test(true)
    
    draw_set_color(c_lime)
    //draw_rectangle(xx, yy, xx + video_width - 1, yy + video_height - 1, true)
    
}

draw_set_color(c_lime)
draw_set_font(-1)
draw_set_halign(fa_left)
draw_set_valign(fa_top)
var text;
text = "video"
text += "#width: " + string(video_width)
text += "#height: " + string(video_height)
text += "#updates: " + string(updates)

//draw_text(0, 0, text)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_clear(backbuffer_color)

var update = false;

if (window_width_last != window_get_width())
or (window_height_last != window_get_height())
or (camera_width_last != view_wview[view_current])
or (camera_height_last != view_hview[view_current]) {
    update = true
}

if (update) {
    show_debug_message("update video " + string(++updates))
    
    window_width_last = window_get_width()
    window_height_last = window_get_height()
    
    camera_width_last = view_wview[view_current]
    camera_height_last = view_hview[view_current]
    
    window_aspect = (window_height_last - (video_h_edge * 2)) / (window_width_last - (video_w_edge * 2))
    camera_aspect = (camera_height_last / camera_width_last)
    
    if (window_aspect &gt; camera_aspect) {
        video_width = floor((window_width_last - (video_w_edge * 2)))
        video_height = floor((window_width_last - (video_h_edge * 2)) * camera_aspect)
    }
    else {
        video_width = floor((window_height_last - (video_w_edge * 2)) / camera_aspect)
        video_height = floor((window_height_last - (video_h_edge * 2)))
    }
    if (surface_exists(application_surface) and (video_width &gt; 0) and (video_height &gt; 0)) {
        update = false
        surface_resize(application_surface, video_width, video_height)
    }
    else {
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
